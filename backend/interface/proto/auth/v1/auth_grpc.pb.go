// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: auth/v1/auth.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_SendSignInLink_FullMethodName      = "/auth.v1.AuthService/SendSignInLink"
	AuthService_SignInWithLink_FullMethodName      = "/auth.v1.AuthService/SignInWithLink"
	AuthService_SendChangeEmailLink_FullMethodName = "/auth.v1.AuthService/SendChangeEmailLink"
	AuthService_ChangeEmailWithLink_FullMethodName = "/auth.v1.AuthService/ChangeEmailWithLink"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	SendSignInLink(ctx context.Context, in *SendSignInLinkRequest, opts ...grpc.CallOption) (*SendSignInLinkResponse, error)
	SignInWithLink(ctx context.Context, in *SignInWithLinkRequest, opts ...grpc.CallOption) (*SignInWithLinkResponse, error)
	SendChangeEmailLink(ctx context.Context, in *SendChangeEmailLinkRequest, opts ...grpc.CallOption) (*SendChangeEmailLinkResponse, error)
	ChangeEmailWithLink(ctx context.Context, in *ChangeEmailWithLinkRequest, opts ...grpc.CallOption) (*ChangeEmailWithLinkResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) SendSignInLink(ctx context.Context, in *SendSignInLinkRequest, opts ...grpc.CallOption) (*SendSignInLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSignInLinkResponse)
	err := c.cc.Invoke(ctx, AuthService_SendSignInLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignInWithLink(ctx context.Context, in *SignInWithLinkRequest, opts ...grpc.CallOption) (*SignInWithLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInWithLinkResponse)
	err := c.cc.Invoke(ctx, AuthService_SignInWithLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SendChangeEmailLink(ctx context.Context, in *SendChangeEmailLinkRequest, opts ...grpc.CallOption) (*SendChangeEmailLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendChangeEmailLinkResponse)
	err := c.cc.Invoke(ctx, AuthService_SendChangeEmailLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangeEmailWithLink(ctx context.Context, in *ChangeEmailWithLinkRequest, opts ...grpc.CallOption) (*ChangeEmailWithLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeEmailWithLinkResponse)
	err := c.cc.Invoke(ctx, AuthService_ChangeEmailWithLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	SendSignInLink(context.Context, *SendSignInLinkRequest) (*SendSignInLinkResponse, error)
	SignInWithLink(context.Context, *SignInWithLinkRequest) (*SignInWithLinkResponse, error)
	SendChangeEmailLink(context.Context, *SendChangeEmailLinkRequest) (*SendChangeEmailLinkResponse, error)
	ChangeEmailWithLink(context.Context, *ChangeEmailWithLinkRequest) (*ChangeEmailWithLinkResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) SendSignInLink(context.Context, *SendSignInLinkRequest) (*SendSignInLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignInLink not implemented")
}
func (UnimplementedAuthServiceServer) SignInWithLink(context.Context, *SignInWithLinkRequest) (*SignInWithLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInWithLink not implemented")
}
func (UnimplementedAuthServiceServer) SendChangeEmailLink(context.Context, *SendChangeEmailLinkRequest) (*SendChangeEmailLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChangeEmailLink not implemented")
}
func (UnimplementedAuthServiceServer) ChangeEmailWithLink(context.Context, *ChangeEmailWithLinkRequest) (*ChangeEmailWithLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmailWithLink not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_SendSignInLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSignInLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SendSignInLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SendSignInLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SendSignInLink(ctx, req.(*SendSignInLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SignInWithLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInWithLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignInWithLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SignInWithLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignInWithLink(ctx, req.(*SignInWithLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SendChangeEmailLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChangeEmailLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SendChangeEmailLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SendChangeEmailLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SendChangeEmailLink(ctx, req.(*SendChangeEmailLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangeEmailWithLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailWithLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeEmailWithLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangeEmailWithLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeEmailWithLink(ctx, req.(*ChangeEmailWithLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSignInLink",
			Handler:    _AuthService_SendSignInLink_Handler,
		},
		{
			MethodName: "SignInWithLink",
			Handler:    _AuthService_SignInWithLink_Handler,
		},
		{
			MethodName: "SendChangeEmailLink",
			Handler:    _AuthService_SendChangeEmailLink_Handler,
		},
		{
			MethodName: "ChangeEmailWithLink",
			Handler:    _AuthService_ChangeEmailWithLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/v1/auth.proto",
}
