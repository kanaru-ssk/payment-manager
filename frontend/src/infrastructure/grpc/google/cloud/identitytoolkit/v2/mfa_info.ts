/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: google/cloud/identitytoolkit/v2/mfa_info.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace google.cloud.identitytoolkit.v2 {
    export class AutoRetrievalInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            app_signature_hash?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_signature_hash" in data && data.app_signature_hash != undefined) {
                    this.app_signature_hash = data.app_signature_hash;
                }
            }
        }
        get app_signature_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set app_signature_hash(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            app_signature_hash?: string;
        }): AutoRetrievalInfo {
            const message = new AutoRetrievalInfo({});
            if (data.app_signature_hash != null) {
                message.app_signature_hash = data.app_signature_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                app_signature_hash?: string;
            } = {};
            if (this.app_signature_hash != null) {
                data.app_signature_hash = this.app_signature_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.app_signature_hash.length)
                writer.writeString(1, this.app_signature_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AutoRetrievalInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AutoRetrievalInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.app_signature_hash = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AutoRetrievalInfo {
            return AutoRetrievalInfo.deserialize(bytes);
        }
    }
    export class StartMfaPhoneRequestInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone_number?: string;
            ios_receipt?: string;
            ios_secret?: string;
            recaptcha_token?: string;
            auto_retrieval_info?: AutoRetrievalInfo;
            safety_net_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone_number" in data && data.phone_number != undefined) {
                    this.phone_number = data.phone_number;
                }
                if ("ios_receipt" in data && data.ios_receipt != undefined) {
                    this.ios_receipt = data.ios_receipt;
                }
                if ("ios_secret" in data && data.ios_secret != undefined) {
                    this.ios_secret = data.ios_secret;
                }
                if ("recaptcha_token" in data && data.recaptcha_token != undefined) {
                    this.recaptcha_token = data.recaptcha_token;
                }
                if ("auto_retrieval_info" in data && data.auto_retrieval_info != undefined) {
                    this.auto_retrieval_info = data.auto_retrieval_info;
                }
                if ("safety_net_token" in data && data.safety_net_token != undefined) {
                    this.safety_net_token = data.safety_net_token;
                }
            }
        }
        get phone_number() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone_number(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ios_receipt() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ios_receipt(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ios_secret() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ios_secret(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get recaptcha_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set recaptcha_token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get auto_retrieval_info() {
            return pb_1.Message.getWrapperField(this, AutoRetrievalInfo, 5) as AutoRetrievalInfo;
        }
        set auto_retrieval_info(value: AutoRetrievalInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_auto_retrieval_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get safety_net_token() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set safety_net_token(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            phone_number?: string;
            ios_receipt?: string;
            ios_secret?: string;
            recaptcha_token?: string;
            auto_retrieval_info?: ReturnType<typeof AutoRetrievalInfo.prototype.toObject>;
            safety_net_token?: string;
        }): StartMfaPhoneRequestInfo {
            const message = new StartMfaPhoneRequestInfo({});
            if (data.phone_number != null) {
                message.phone_number = data.phone_number;
            }
            if (data.ios_receipt != null) {
                message.ios_receipt = data.ios_receipt;
            }
            if (data.ios_secret != null) {
                message.ios_secret = data.ios_secret;
            }
            if (data.recaptcha_token != null) {
                message.recaptcha_token = data.recaptcha_token;
            }
            if (data.auto_retrieval_info != null) {
                message.auto_retrieval_info = AutoRetrievalInfo.fromObject(data.auto_retrieval_info);
            }
            if (data.safety_net_token != null) {
                message.safety_net_token = data.safety_net_token;
            }
            return message;
        }
        toObject() {
            const data: {
                phone_number?: string;
                ios_receipt?: string;
                ios_secret?: string;
                recaptcha_token?: string;
                auto_retrieval_info?: ReturnType<typeof AutoRetrievalInfo.prototype.toObject>;
                safety_net_token?: string;
            } = {};
            if (this.phone_number != null) {
                data.phone_number = this.phone_number;
            }
            if (this.ios_receipt != null) {
                data.ios_receipt = this.ios_receipt;
            }
            if (this.ios_secret != null) {
                data.ios_secret = this.ios_secret;
            }
            if (this.recaptcha_token != null) {
                data.recaptcha_token = this.recaptcha_token;
            }
            if (this.auto_retrieval_info != null) {
                data.auto_retrieval_info = this.auto_retrieval_info.toObject();
            }
            if (this.safety_net_token != null) {
                data.safety_net_token = this.safety_net_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone_number.length)
                writer.writeString(1, this.phone_number);
            if (this.ios_receipt.length)
                writer.writeString(2, this.ios_receipt);
            if (this.ios_secret.length)
                writer.writeString(3, this.ios_secret);
            if (this.recaptcha_token.length)
                writer.writeString(4, this.recaptcha_token);
            if (this.has_auto_retrieval_info)
                writer.writeMessage(5, this.auto_retrieval_info, () => this.auto_retrieval_info.serialize(writer));
            if (this.safety_net_token.length)
                writer.writeString(6, this.safety_net_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartMfaPhoneRequestInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartMfaPhoneRequestInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone_number = reader.readString();
                        break;
                    case 2:
                        message.ios_receipt = reader.readString();
                        break;
                    case 3:
                        message.ios_secret = reader.readString();
                        break;
                    case 4:
                        message.recaptcha_token = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.auto_retrieval_info, () => message.auto_retrieval_info = AutoRetrievalInfo.deserialize(reader));
                        break;
                    case 6:
                        message.safety_net_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartMfaPhoneRequestInfo {
            return StartMfaPhoneRequestInfo.deserialize(bytes);
        }
    }
    export class StartMfaPhoneResponseInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_info?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_info" in data && data.session_info != undefined) {
                    this.session_info = data.session_info;
                }
            }
        }
        get session_info() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_info(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            session_info?: string;
        }): StartMfaPhoneResponseInfo {
            const message = new StartMfaPhoneResponseInfo({});
            if (data.session_info != null) {
                message.session_info = data.session_info;
            }
            return message;
        }
        toObject() {
            const data: {
                session_info?: string;
            } = {};
            if (this.session_info != null) {
                data.session_info = this.session_info;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_info.length)
                writer.writeString(1, this.session_info);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartMfaPhoneResponseInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartMfaPhoneResponseInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_info = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartMfaPhoneResponseInfo {
            return StartMfaPhoneResponseInfo.deserialize(bytes);
        }
    }
    export class FinalizeMfaPhoneRequestInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_info?: string;
            code?: string;
            android_verification_proof?: string;
            phone_number?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_info" in data && data.session_info != undefined) {
                    this.session_info = data.session_info;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("android_verification_proof" in data && data.android_verification_proof != undefined) {
                    this.android_verification_proof = data.android_verification_proof;
                }
                if ("phone_number" in data && data.phone_number != undefined) {
                    this.phone_number = data.phone_number;
                }
            }
        }
        get session_info() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_info(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get android_verification_proof() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set android_verification_proof(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get phone_number() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set phone_number(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            session_info?: string;
            code?: string;
            android_verification_proof?: string;
            phone_number?: string;
        }): FinalizeMfaPhoneRequestInfo {
            const message = new FinalizeMfaPhoneRequestInfo({});
            if (data.session_info != null) {
                message.session_info = data.session_info;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.android_verification_proof != null) {
                message.android_verification_proof = data.android_verification_proof;
            }
            if (data.phone_number != null) {
                message.phone_number = data.phone_number;
            }
            return message;
        }
        toObject() {
            const data: {
                session_info?: string;
                code?: string;
                android_verification_proof?: string;
                phone_number?: string;
            } = {};
            if (this.session_info != null) {
                data.session_info = this.session_info;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.android_verification_proof != null) {
                data.android_verification_proof = this.android_verification_proof;
            }
            if (this.phone_number != null) {
                data.phone_number = this.phone_number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_info.length)
                writer.writeString(1, this.session_info);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (this.android_verification_proof.length)
                writer.writeString(3, this.android_verification_proof);
            if (this.phone_number.length)
                writer.writeString(4, this.phone_number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalizeMfaPhoneRequestInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalizeMfaPhoneRequestInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_info = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    case 3:
                        message.android_verification_proof = reader.readString();
                        break;
                    case 4:
                        message.phone_number = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalizeMfaPhoneRequestInfo {
            return FinalizeMfaPhoneRequestInfo.deserialize(bytes);
        }
    }
    export class FinalizeMfaPhoneResponseInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            android_verification_proof?: string;
            android_verification_proof_expire_time?: dependency_1.google.protobuf.Timestamp;
            phone_number?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("android_verification_proof" in data && data.android_verification_proof != undefined) {
                    this.android_verification_proof = data.android_verification_proof;
                }
                if ("android_verification_proof_expire_time" in data && data.android_verification_proof_expire_time != undefined) {
                    this.android_verification_proof_expire_time = data.android_verification_proof_expire_time;
                }
                if ("phone_number" in data && data.phone_number != undefined) {
                    this.phone_number = data.phone_number;
                }
            }
        }
        get android_verification_proof() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set android_verification_proof(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get android_verification_proof_expire_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set android_verification_proof_expire_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_android_verification_proof_expire_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get phone_number() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set phone_number(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            android_verification_proof?: string;
            android_verification_proof_expire_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            phone_number?: string;
        }): FinalizeMfaPhoneResponseInfo {
            const message = new FinalizeMfaPhoneResponseInfo({});
            if (data.android_verification_proof != null) {
                message.android_verification_proof = data.android_verification_proof;
            }
            if (data.android_verification_proof_expire_time != null) {
                message.android_verification_proof_expire_time = dependency_1.google.protobuf.Timestamp.fromObject(data.android_verification_proof_expire_time);
            }
            if (data.phone_number != null) {
                message.phone_number = data.phone_number;
            }
            return message;
        }
        toObject() {
            const data: {
                android_verification_proof?: string;
                android_verification_proof_expire_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                phone_number?: string;
            } = {};
            if (this.android_verification_proof != null) {
                data.android_verification_proof = this.android_verification_proof;
            }
            if (this.android_verification_proof_expire_time != null) {
                data.android_verification_proof_expire_time = this.android_verification_proof_expire_time.toObject();
            }
            if (this.phone_number != null) {
                data.phone_number = this.phone_number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.android_verification_proof.length)
                writer.writeString(1, this.android_verification_proof);
            if (this.has_android_verification_proof_expire_time)
                writer.writeMessage(2, this.android_verification_proof_expire_time, () => this.android_verification_proof_expire_time.serialize(writer));
            if (this.phone_number.length)
                writer.writeString(3, this.phone_number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalizeMfaPhoneResponseInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalizeMfaPhoneResponseInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.android_verification_proof = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.android_verification_proof_expire_time, () => message.android_verification_proof_expire_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.phone_number = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalizeMfaPhoneResponseInfo {
            return FinalizeMfaPhoneResponseInfo.deserialize(bytes);
        }
    }
}
